#include <stdio.h>
#include <stdlib.h>

int main()
{
    printf("Hello Abhijith!\n");
    return 0;
}

// Drawing a shape
#include <stdio.h>
#include <stdlib.h>
int main()
{
    printf("   /|\n");
    printf("  / |\n");
    printf(" /  |\n");
    printf("/___|\n");
    return 0;
}

//variables
#include <stdio.h>
#include <stdlib.h>
int main()
{
    char characterName[] = "Abhijith";
    int characterAge = 25;
    printf("There once was a man named %s\n", characterName);
    printf("he was %d years old.\n", characterAge);
    characterAge = 26;
    printf("He really liked the name %s\n", characterName);
    printf("but did not like being %d.\n", characterAge);
    return 0;
}

//Datatypes
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int age = 25;
    double gpa = 3.6;
    char grade = 'A';
    char phrase[] = "Giraffe Academy";
    printf("YT channel is: %s", phrase);
    return 0;
}

//printf function
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int favNum = 9;
    char myChar = 'i';
    printf("Hello\nWorld\n");
    printf("Hello\"World\n");
    printf("My fav no. is %d\n", 9);
    printf("My fav %s is %d\n", "number", 9);
    printf("My fav %s is %f\n", "number", 9.6);
    printf("My fav %s is %d\n", "no.", favNum);
    printf("My fav %c is %d\n", myChar, favNum);
    return 0;
}

//working with numbers
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
int main()
{
    printf("%f\n", 5.3 + 2.1);
    printf("%f\n", 5 + 2.1);
    printf("%f\n", 5 / 4.0);
    printf("%.2f\n", 8.9143);
    printf("%.2f\n", 8.9153);
    printf("%f\n",pow(4, 3));
    printf("%.f\n",sqrt(49));
    printf("%f\n",ceil(36.356));
    printf("%f\n",floor(36.656));
    return 0;
}

//comments(we use => for one line //, for multi lines => /* */)

//constants
#include <stdio.h>
#include <stdlib.h>
int main()
{
    const int num = 5;
    printf("num is: %d\n", num);
    num = 8;
    printf("num is: %d\n", num);
    return 0;
}

//getting user input
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int age;
    double gpa;
    char grade;
    char name[20];
    char fullName[20];
    printf("Enter your name: ");
    scanf("%s", name); // for string type, scanf will get only upto the characters of first space
    printf("Enter your full name: ");
    fgets(fullName, 20, stdin); // use fgets function to get the whole string line which includes spaces
    printf("Enter your age: ");
    scanf("%d", &age);
    printf("Enter your gpa: ");
    scanf("%lf", &gpa);
    printf("Enter your grade: ");
    scanf("%c", &grade);
    printf("Your name is %s and your full name is %s and you are %d years old and your gpa is %.2f and your grade is %c", name, fullName, age, gpa, grade);
    return 0;
}

//building a basic calculator
#include <stdio.h>
#include <stdlib.h>
int main()
{
    double num1, num2;
    printf("Enter first number: ");
    scanf("%lf", &num1);
    printf("Enter second number: ");
    scanf("%lf", &num2);
    printf("Answer: %.2f", num1 + num2);
    return 0;
}

//building a mad libs game
#include <stdio.h>
#include <stdlib.h>
int main()
{
    char color[20];
    char pluralNoun[20];
    char celebrityF[20];
    char celebrityL[20];
    printf("Enter a color: ");
    scanf("%s", color);
    printf("Enter a plural noun: ");
    scanf("%s", pluralNoun);
    printf("Enter a celebrity: ");
    scanf("%s%s", celebrityF, celebrityL);
    printf("Roses are %s\n", color);
    printf("%s are blue\n", pluralNoun);
    printf("I love %s %s\n", celebrityF, celebrityL);
    return 0;
}

//arrays
#include <stdio.h>
#include <stdlib.h>
int main()
{
    //when we don't know the values to store in the array but know the size of an array then we can just declare like
    // int luckyNumbers[10]; // here 10 indicates no. of elements to store
    int luckyNumbers[] = {1, 4, 3, 16, 23, 42};
    luckyNumbers[0] = 12;
    printf("%d\n", luckyNumbers[0]);
    printf("%d\n", luckyNumbers[1]);
    return 0;
}

//functions
#include <stdio.h>
#include <stdlib.h>
void createHello(){
    printf("Age is: 25\n");
}

void sayHi(){
    printf("Hi Abhijith\n");
    createHello();
}

void sayHello(char name[], int age){
    printf("Hello %s, you are %d", name, age);
}

int main()
{
    sayHi();
    sayHello("Abhijith", 25);
    return 0;
}

//return statement
#include <stdio.h>
#include <stdlib.h>
double cube(double num){
    return num * num * num;
}

int main()
{
    printf("Answer: %.2f", cube(2.0));
    return 0;
}

//if statements
#include <stdio.h>
#include <stdlib.h>
int max(int num1,int num2){
    int result;
    if(num1 > num2){
        result = num1;
    }else{
        result = num2;
    }
    return result;
}
int maxNum(int num1, int num2, int num3){
    int result;
    if(num1 >= num2 && num1 >= num3){
        result = num1;
    }else if(num2 >= num1 && num2 >= num3){
        result = num2;
    }else{
        result = num3;
    }
    return result;
}
int main()
{
    printf("Max is: %d\n", max(4,6));
    printf("Max is: %d", maxNum(21,30,16));
    return 0;
}

//building a better calculator
#include <stdio.h>
#include <stdlib.h>
int main()
{
    double num1;
    double num2;
    char op;
    printf("Enter a number: ");
    scanf("%lf", &num1);
    printf("Enter operator: ");
    scanf(" %c", &op);
    printf("Enter a number: ");
    scanf("%lf", &num2);
    if(op == '+'){
        printf("%f", num1 + num2);
    }else if(op == '-'){
        printf("%f", num1 - num2);
    }else if(op == '/'){
        printf("%f", num1 / num2);
    }else if(op == '*'){
        printf("%f", num1 * num2);
    }else{
        printf("Invalid operator");
    }
    return 0;
}

//switch statements
#include <stdio.h>
#include <stdlib.h>
int main()
{
    char grade = 'R';
    switch(grade){
        case 'A':
            printf("You did great!");
            break;
        case 'B':
            printf("You did alright!");
            break;
        case 'C':
            printf("You did poorly!");
            break;
        case 'D':
            printf("You did very bad!");
            break;
        case 'F':
            printf("You failed!");
            break;
        default:
            printf("Invalid grade!");
    }
    return 0;
}

//structs
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
struct Student{
    char name[50];
    char major[50];
    int age;
    double gpa;
};
int main()
{
    struct Student student1;
    strcpy(student1.name, "Abhijith");
    strcpy(student1.major, "CSE");
    student1.age = 25;
    student1.gpa = 7.1;
    
    struct Student student2;
    strcpy(student2.name, "Kishore");
    strcpy(student2.major, "CSE");
    student2.age = 24;
    student2.gpa = 6.8;
    
    printf("%s\n", student2.name);
    printf("%s\n", student2.major);
    printf("%d\n", student2.age);
    printf("%.2f", student2.gpa);
    return 0;
}

//while and do-while loop
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int index = 1;
    //while loop
    while(index <= 5){
        printf("In while loop %d\n", index);
        index++;
        // index += 1;
    }
    //do-while loop
    do{
        printf("In do-while loop %d\n", index);
        index++;
    }while(index <= 5);
    return 0;
}

//building a guessing game
1) #include <stdio.h>
#include <stdlib.h>
int main()
{
    int secretNumber = 5;
    int guess;
    while(guess != secretNumber){
        printf("Enter a number: ");
        scanf("%d", &guess);
    }
    printf("You Win!");
    return 0;
}
2) #include <stdio.h>
#include <stdlib.h>
int main()
{
    int secretNumber = 5, guess, guessCount = 0, guessLimit = 3, outOfGuesses = 0;
    while(guess != secretNumber && outOfGuesses == 0){
        if(guessCount < guessLimit){
            printf("Enter a number: ");
            scanf("%d", &guess);
            guessCount++;
        }else{
            outOfGuesses = 1;
        }
    }
    if(outOfGuesses){
        printf("Out of guesses");
    }else{
        printf("You Win!");
    }
    return 0;
}

//for loop
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int luckyNumbers[] = {4, 8, 15, 16, 23, 42};
    int j=0;
    for(int i=0;i<6;i++){
        printf("Lucky Number is %d\n", luckyNumbers[i]);
    }
    // for(int j=1;j<=5;j++){
    //     printf("j is %d\n", j);
    // }
    return 0;
}

//2D arrays and nested loops
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int i,j;
    int nums[3][2] = {
        {1,2},
        {3,4},
        {5,6}
    };
    // printf("%d", nums[1][1]);
    for(i = 0; i < 3; i++){
        for(j = 0; j < 2; j++){
            printf("%d,",nums[i][j]);
        }
        printf("\n");
    }
    return 0;
}

//memory addresses
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int age = 25;
    double gpa = 6.5;
    char grade = 'A';
    printf("Address of age is %p\n", &age);
    printf("Address of gpa is %p\n", &gpa);
    printf("Address of grade is %p", &grade);
    return 0;
}

//pointers
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int age = 25;
    int *pAge = &age;
    double gpa = 6.5;
    double *pGpa = &gpa;
    char grade = 'A';
    char *pGrade = &grade;
    printf("age's memory address: %p\n", &age);
    return 0;
}

//dereferencing pointers
#include <stdio.h>
#include <stdlib.h>
int main()
{
    int age = 25;
    int *pAge = &age;
    printf("Memory address of age is %p\n", pAge);
    //dereferencing a pointer
    printf("Value of age is %d\n", *pAge);
    printf("Value of age is %d\n", *&age);
    printf("Memory address of age is %p\n", &*&age);
    printf("Value of age is %d\n", *&*&age);
    return 0;
}

//writing files
#include <stdio.h>
#include <stdlib.h>
int main()
{
    // FILE *fpointer = fopen("employees.txt", "w"); //here "w" will override the existing content of a file
    FILE *fpointer = fopen("employees.txt", "a"); //here "a" will append to the end of the existing content of a file
    fprintf(fpointer, "\nLeepika, Sales Executive");
    fclose(fpointer);
    return 0;
}

//reading files
#include <stdio.h>
#include <stdlib.h>
int main()
{
    char line[255];
    FILE *fpointer = fopen("employees.txt", "r");
    // fprintf(fpointer, "\nPooja, QA\nRamakanth, Product Manager");
    fgets(line, 255, fpointer);
    fgets(line, 255, fpointer);
    fgets(line, 255, fpointer);
    printf("%s", line);
    fclose(fpointer);
    return 0;
}